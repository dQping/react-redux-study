{"version":3,"sources":["../../../Desktop/app/hello-world/src/components/AddTodo.js","../../../Desktop/app/hello-world/src/action/index.js","../../../Desktop/app/hello-world/src/containers/AddTodoContainer.js","../../../Desktop/app/hello-world/src/action/actionTypes.js","../../../Desktop/app/hello-world/src/components/Todo.js","../../../Desktop/app/hello-world/src/components/TodoList.js","../../../Desktop/app/hello-world/src/containers/TodoListContainer.js","../../../Desktop/app/hello-world/src/components/Footer.js","../../../Desktop/app/hello-world/src/containers/FooterContainer.js","../../../Desktop/app/hello-world/src/components/App.js","../../../Desktop/app/hello-world/src/reducers/todos.js","../../../Desktop/app/hello-world/src/reducers/filter.js","../../../Desktop/app/hello-world/src/reducers/text.js","../../../Desktop/app/hello-world/src/reducers/index.js","../../../Desktop/app/hello-world/src/index.js"],"names":["AddTodo","handleClick","_this","props","addTodoAction","text","setTodoTextAction","handleChange","e","target","value","react_default","a","createElement","this","onChange","onClick","Component","count","connect","state","dispatch","type","id","Todo","_this$props","completed","style","textDecoration","TodoList","fetchTodosAction","todos","toggleTodoAction","map","todo","Todo_Todo","Object","assign","key","getVisibleTodos","filter","Error","data","fetch","then","response","json","fetchTodosSuccess","error","fetchTodosFailure","console","log","Footer","setFilterAction","disabled","App","className","AddTodoContainer","TodoListContainer","FooterContainer","initialState","isFetching","arguments","length","undefined","action","concat","toConsumableArray","item","objectSpread","reducer","todoApp","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.cfd716de.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class AddTodo extends Component {\n    handleClick = () => {\n        this.props.addTodoAction(this.props.text)\n        this.props.setTodoTextAction('')\n    }\n    handleChange = e => {\n        this.props.setTodoTextAction(e.target.value)\n    }\n    render() {\n        return (\n            <div>\n                <input value={this.props.text} onChange={this.handleChange} />\n                <button onClick={this.handleClick}>Add</button>\n            </div>\n        )\n    }\n}\n","import {\n    ADD_TODO,\n    TOGGLE_TODO,\n    SET_FILTER,\n    SET_TODO_TEXT,\n    FETCH_TODOS_REQUEST,\n    FETCH_TODOS_SUCCESS,\n    FETCH_TODOS_FAILURE\n} from './actionTypes'\n\nlet count = 0\n\nconst fetchTodosRequest = () => ({\n    type: FETCH_TODOS_REQUEST\n})\nconst fetchTodosSuccess = data => ({\n    type: FETCH_TODOS_SUCCESS,\n    data\n})\nconst fetchTodosFailure = error => ({\n    type: FETCH_TODOS_FAILURE,\n    error\n})\n\nexport const fetchTodosAction = () => {\n    return dispatch => {\n        dispatch(fetchTodosRequest())\n        return fetch('./mock/todos.json').then(\n            response => {\n                response.json().then(data => {\n                    dispatch(fetchTodosSuccess(data))\n                })\n            },\n            error => {\n                dispatch(fetchTodosFailure(error))\n                console.log('An error occurred: ' + error)\n            }\n        )\n    }\n}\n/**\n *\n * 增加 todo\n * @param {*} text\n * @returns\n */\nexport const addTodoAction = text => ({\n    type: ADD_TODO,\n    id: count++,\n    text\n})\n\n/**\n *\n * 修改代办事项状态\n * @param {*} id\n */\nexport const toggleTodoAction = id => ({\n    type: TOGGLE_TODO,\n    id\n})\n\n/**\n *\n * 设置过滤状态\n * @param {*} filter\n */\nexport const setFilterAction = filter => ({\n    type: SET_FILTER,\n    filter\n})\n\n/**\n *\n * 设置新增代办事项的文本信息\n * @param {*} text\n */\nexport const setTodoTextAction = text => ({\n    type: SET_TODO_TEXT,\n    text\n})\n","import { connect } from 'react-redux'\nimport AddTodo from '../components/AddTodo'\nimport { setTodoTextAction, addTodoAction } from '../action'\n\nconst mapStateToProps = state => ({\n    text: state.text\n})\nconst mapDispatchToProps = dispatch => ({\n    setTodoTextAction: text => dispatch(setTodoTextAction(text)),\n    addTodoAction: text => dispatch(addTodoAction(text))\n})\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddTodo)\n","export const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const SET_FILTER = 'SET_FILTER'\nexport const SET_TODO_TEXT = 'SET_TODO_TEXT'\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST'\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS'\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE'\n","import React, { Component } from 'react'\n\nexport default class Todo extends Component {\n  render() {\n      const {completed,text,onClick}=this.props\n    return (\n      <li style={{textDecoration: completed ? \"line-through\" : \"none\"}} onClick={onClick}>\n          {text}\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Todo from './Todo'\n\nexport default class TodoList extends Component {\n    componentDidMount() {\n        this.props.fetchTodosAction()\n    }\n\n    render() {\n        const { todos, toggleTodoAction } = this.props\n        return (\n            <ul>\n                {todos.map(todo => {\n                    return (\n                        <Todo\n                            key={todo.id}\n                            {...todo}\n                            onClick={() => {\n                                toggleTodoAction(todo.id)\n                            }}\n                        />\n                    )\n                })}\n            </ul>\n        )\n    }\n}\n","import { connect } from 'react-redux'\nimport TodoList from '../components/TodoList'\nimport { toggleTodoAction, fetchTodosAction } from '../action'\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case 'All':\n            return todos\n        case 'Completed':\n            return todos.filter(todo => todo.completed)\n        case 'Active':\n            return todos.filter(todo => !todo.completed)\n        default:\n            return new Error('Unkown Event: ' + filter)\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: getVisibleTodos(state.todos.data, state.filter)\n})\nconst mapDispatchToProps = dispatch => ({\n    toggleTodoAction: id => dispatch(toggleTodoAction(id)),\n    fetchTodosAction: () => dispatch(fetchTodosAction())\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TodoList)\n","import React, { Component } from 'react'\n\nexport default class Footer extends Component {\n    render() {\n        const { filter, setFilterAction } = this.props\n        return (\n            <div>\n                <span>Show:</span>\n                <button\n                    disabled={filter === 'All'}\n                    onClick={() => {\n                        setFilterAction('All')\n                    }}\n                >\n                    All\n                </button>\n                <button\n                    disabled={filter === 'Active'}\n                    onClick={() => {\n                        setFilterAction('Active')\n                    }}\n                >\n                    Active\n                </button>\n                <button\n                    disabled={filter === 'Completed'}\n                    onClick={() => {\n                        setFilterAction('Completed')\n                    }}\n                >\n                    Completed\n                </button>\n            </div>\n        )\n    }\n}\n","import { connect } from 'react-redux'\nimport Footer from '../components/Footer'\nimport { setFilterAction } from '../action'\n\nconst mapStateToProps = state => ({\n    filter: state.filter\n})\nconst mapDispatchToProps = dispatch => ({\n    setFilterAction: filter => dispatch(setFilterAction(filter))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Footer)\n","import React, { Component } from 'react'\nimport AddTodoContainer from '../containers/AddTodoContainer'\nimport TodoListcontainer from '../containers/TodoListContainer'\nimport FooterContainer from '../containers/FooterContainer'\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <AddTodoContainer />\n                <TodoListcontainer />\n                <FooterContainer />\n            </div>\n        )\n    }\n}\n\nexport default App\n","import {\n    ADD_TODO,\n    TOGGLE_TODO,\n    FETCH_TODOS_REQUEST,\n    FETCH_TODOS_SUCCESS,\n    FETCH_TODOS_FAILURE\n} from '../action/actionTypes'\n\nconst initialState = {\n    isFetching: false,\n    error: null,\n    data: []\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_TODOS_REQUEST:\n            return {\n                ...state,\n                isFetching: true\n            }\n        case FETCH_TODOS_SUCCESS:\n            return {\n                ...state,\n                isFetching: false,\n                data: action.data\n            }\n        case FETCH_TODOS_FAILURE:\n            return {\n                ...state,\n                isFetching: false,\n                error: action.error\n            }\n\n        default:\n            return {\n                ...state,\n                data: todos(state.data, action)\n            }\n    }\n}\n/**\n *\n *\n * @param {*} state\n * @param {*} action\n * @returns\n */\nconst todos = (state = [], action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n\n        case TOGGLE_TODO:\n            return state.map(item =>\n                item.id === action.id\n                    ? { ...item, completed: !item.completed }\n                    : item\n            )\n\n        default:\n            return state\n    }\n}\nexport default reducer\n","import { SET_FILTER } from '../action/actionTypes'\n\n/**\n *\n *\n * @param {*} state\n * @param {*} action\n * @returns\n */\nconst filter = (state = 'All', action) => {\n    switch (action.type) {\n        case SET_FILTER:\n            return action.filter\n        default:\n            return state\n    }\n}\n\nexport default filter\n","import { SET_TODO_TEXT } from '../action/actionTypes'\n\n/**\n *\n *\n * @param {*} state\n * @param {*} action\n * @returns\n */\nconst todoApp = (state = '', action) => {\n    switch (action.type) {\n        case SET_TODO_TEXT:\n            return action.text\n        default:\n            return state\n    }\n}\n\nexport default todoApp\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport filter from './filter'\nimport text from './text'\n\nexport default combineReducers({\n    todos,\n    filter,\n    text\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport thunkMiddleware from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(\n    rootReducer,\n    /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware))\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}